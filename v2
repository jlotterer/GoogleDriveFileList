function start() {
  // Log a message in the Apps Script's logger (for debugging purposes)
  Logger.log('Optimized JavierCane Code with Drive API, Batching, and Error Handling');

  // Set the mode of operation:
  // 1 - Log all files/folders (no filter)
  // 2 - Filter for specific emails with editor permission
  // 3 - Filter for specific emails with viewer permission
  const mode = 1; // Change this value to switch modes

  // Get the active sheet (where the data will be written)
  const sheet = SpreadsheetApp.getActiveSheet();

  // Append the header row with column names to the sheet
  sheet.appendRow(["File Name", "Parent Folder", "Sharing Access", "Sharing Permission", "Editors", "Viewers", "URL"]);

  // Retrieve the folder using its ID from Google Drive
  const folderId = "1-ohSBl-HsxlfW6JQ9N-TWH40pxFarCZ2";
  const folderName = getFolderName(folderId);

  // Create an array to hold the data before writing to the sheet
  const data = [];

  // Call the recursive function to list files and subfolders starting with this folder
  recursiveListSharedFiles(folderId, folderName, data, mode);

  // Write any remaining data to the sheet if there are leftover records
  if (data.length > 0) {
    sheet.getRange(sheet.getLastRow() + 1, 1, data.length, data[0].length).setValues(data);
  }
}

function recursiveListSharedFiles(folderId, folderName, data, mode) {
  // List shared files in the current folder and write data to the array
  listSharedFiles(folderId, folderName, data, mode);

  // Get any subfolders within the current folder using the Drive API
  const subfolders = Drive.Files.list({
    q: `'${folderId}' in parents and mimeType = 'application/vnd.google-apps.folder'`,
    fields: "files(id, name)" // Adjusted to "files" for Drive API response
  });

  // Check if subfolders is defined and iterable
  if (subfolders.files && subfolders.files.length > 0) {
    // Loop through all subfolders and call the function recursively
    for (const subfolder of subfolders.files) {
      recursiveListSharedFiles(subfolder.id, subfolder.name, data, mode); // Recurse into the subfolder
    }
  }
}

function listSharedFiles(folderId, folderName, data, mode) {
  // Get all files in the current folder using the Drive API
  const files = Drive.Files.list({
    q: `'${folderId}' in parents and trashed = false`,
    fields: "files(id, name, permissions)" // Use "files" for the Drive API response
  });

  // Create a temporary array to hold the batch data
  const batchData = [];

  // Define a list of email addresses for filtering (for modes 2 and 3)
  const filterEmails = [
    "your.own@email.com",   // Replace with actual internal emails
    "pvm345@gmail.com"
  ];

  // Loop through all files in the folder
  for (const file of files.files) { // Change "items" to "files"
    const fileName = file.name; // Use "name" instead of "title"
    const fileUrl = `https://drive.google.com/open?id=${file.id}`; // Generate the file URL

    // Ensure that the permissions object exists before processing
    const permissions = file.permissions || [];

    // Determine sharing access and permissions
    const sharingAccess = permissions.some(p => p.role === 'owner') ? 'Shared' : 'Private';
    const sharingPermission = permissions.map(p => p.role).join(", ");

    // Get the list of editor and viewer emails
    const editorEmails = permissions.filter(p => p.role === 'writer').map(p => p.emailAddress || 'N/A').toString();
    const viewerEmails = permissions.filter(p => p.role === 'reader').map(p => p.emailAddress || 'N/A').toString();

    // Mode 1: Log all files without filtering
    if (mode === 1) {
      batchData.push([
        fileName,             // File name
        folderName,           // Parent folder name
        sharingAccess,        // Sharing access level
        sharingPermission,    // Sharing permission
        editorEmails,         // List of editor emails
        viewerEmails,         // List of viewer emails
        fileUrl               // File URL
      ]);
    }

    // Mode 2: Filter for specific emails with editor permission
    else if (mode === 2 && filterEmails.some(email => editorEmails.includes(email))) {
      batchData.push([
        fileName,
        folderName,
        sharingAccess,
        sharingPermission,
        editorEmails,
        viewerEmails,
        fileUrl
      ]);
    }

    // Mode 3: Filter for specific emails with viewer permission
    else if (mode === 3 && filterEmails.some(email => viewerEmails.includes(email))) {
      batchData.push([
        fileName,
        folderName,
        sharingAccess,
        sharingPermission,
        editorEmails,
        viewerEmails,
        fileUrl
      ]);
    }

    // If we reach 100 files, write the batch to the sheet
    if (batchData.length === 100) {
      // Write the batch data to the sheet
      SpreadsheetApp.getActiveSheet().getRange(
        SpreadsheetApp.getActiveSheet().getLastRow() + 1,
        1,
        batchData.length,
        batchData[0].length
      ).setValues(batchData);

      // Clear the batch data for the next set of files
      batchData.length = 0; // Reset the batch data array
    }
  }

  // Write any remaining files in the last batch
  if (batchData.length > 0) {
    SpreadsheetApp.getActiveSheet().getRange(
      SpreadsheetApp.getActiveSheet().getLastRow() + 1,
      1,
      batchData.length,
      batchData[0].length
    ).setValues(batchData);
  }
}

// Helper function to get the name of the folder by its ID
function getFolderName(folderId) {
  const folder = Drive.Files.get(folderId);
  return folder.name; // Use "name" instead of "title" to get the folder name
}
