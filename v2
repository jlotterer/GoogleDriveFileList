// File: Code.gs

function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('File Audit')
    .addItem('Run File Audit', 'showAuditDialog')
    .addToUi();
}

function showAuditDialog() {
  const html = HtmlService.createHtmlOutput(`
    <!DOCTYPE html>
    <html>
      <head>
        <base target="_top">
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
        <link href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css" rel="stylesheet">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
        <script>
          function runAudit() {
            const form = document.getElementById('auditForm');
            const formData = new FormData(form);
            document.getElementById('progressBar').style.display = 'block';
            google.script.run
              .withSuccessHandler(function(result) {
                M.toast({html: 'Audit complete! New tab created: ' + result.sheetName});
              })
              .withFailureHandler(function(error) {
                M.toast({html: 'Error: ' + error.message, classes: 'red'});
              })
              .withUserObject(form)
              .auditDriveFiles(Object.fromEntries(formData));
          }

          function updateProgressBar(percent) {
            const fill = document.getElementById('progressBarFill');
            fill.style.width = percent + '%';
            fill.innerHTML = percent + '%';
          }

          setInterval(function() {
            google.script.run.withSuccessHandler(updateProgressBar).manageProgress('get');
          }, 1000);
        </script>
      </head>
      <body>
        <div class="container">
          
          <form id="auditForm" class="col s12">
            <div class="input-field">
              <input type="text" id="folderId" name="folderId" required>
              <label for="folderId">Root Folder ID</label>
            </div>
            <p>Audit Mode:</p>
            <p>
              <label>
                <input name="mode" type="radio" value="all" checked/>
                <span>List all files</span>
              </label>
            </p>
            <p>
              <label>
                <input name="mode" type="radio" value="editors"/>
                <span>Filter for specific editors</span>
              </label>
            </p>
            <p>
              <label>
                <input name="mode" type="radio" value="viewers"/>
                <span>Filter for specific viewers</span>
              </label>
            </p>
            <p>
              <label>
                <input name="mode" type="radio" value="owners"/>
                <span>Filter for specific owners</span>
              </label>
            </p>
            <div class="input-field">
              <textarea name="emails" class="materialize-textarea" rows="3" cols="40"></textarea>
              <label>Email addresses (comma-separated, for filtering)</label>
            </div>
            <p>
              <label>
                <input type="checkbox" name="removePermissions" value="true"/>
                <span>Remove permissions for listed emails</span>
              </label>
            </p>
            <div class="center-align">
              <a class="waves-effect waves-light btn" onclick="runAudit()">Run Audit</a>
            </div>
          </form>
          <div id="progressBar" class="progress" style="display:none;">
            <div id="progressBarFill" class="determinate" style="width: 0%;">0%</div>
          </div>
        </div>
      </body>
    </html>
  `).setWidth(400).setHeight(600);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'File Options');
}


function manageProgress(action, value) {
  const props = PropertiesService.getScriptProperties();
  if (action === 'get') {
    return Number(props.getProperty('auditProgress') || 0);
  } else if (action === 'set') {
    props.setProperty('auditProgress', value.toString());
  } else if (action === 'clear') {
    props.deleteProperty('auditProgress');
  }
}

function auditDriveFiles(options) {
  manageProgress('clear');
  
  const rootFolderId = options.folderId;
  const mode = options.mode;
  const emails = options.emails ? options.emails.split(',').map(e => e.trim()) : [];
  const removePermissions = options.removePermissions === 'true';
  
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const newSheetName = 'File Audit ' + new Date().toLocaleString();
  const sheet = spreadsheet.insertSheet(newSheetName);
  
  sheet.appendRow(['File/Folder Name', 'Type', 'Full Path', 'Owner', 'Sharing Access', 'Sharing Permission', 'Editors', 'Viewers', 'URL', 'Permissions Removed']);
  
  const allItems = getAllItems(rootFolderId);
  processItems(allItems, sheet, mode, emails, removePermissions);
  
  sheet.autoResizeColumns(1, 10);
  manageProgress('set', 100);
  
  return {sheetName: newSheetName};
}

function getAllItems(folderId) {
  const allItems = [];
  const folderStack = [{id: folderId, path: ''}];
  const fields = 'nextPageToken, files(id, name, mimeType, owners, permissions, webViewLink, parents)';
  
  while (folderStack.length > 0) {
    const currentFolder = folderStack.pop();
    let pageToken;
    
    do {
      const response = Drive.Files.list({
        q: `'${currentFolder.id}' in parents and trashed = false`,
        fields: fields,
        pageToken: pageToken,
        pageSize: 1000
      });
      
      response.files.forEach(file => {
        const fullPath = currentFolder.path + '/' + file.name;
        allItems.push({...file, fullPath: fullPath});
        
        if (file.mimeType === 'application/vnd.google-apps.folder') {
          folderStack.push({id: file.id, path: fullPath});
        }
      });
      
      pageToken = response.nextPageToken;
    } while (pageToken);
  }
  
  return allItems;
}

function processItems(items, sheet, mode, emails, removePermissions) {
  const batchSize = 100;
  for (let i = 0; i < items.length; i += batchSize) {
    const batch = items.slice(i, i + batchSize);
    const rows = batch.map(item => {
      const itemType = item.mimeType === 'application/vnd.google-apps.folder' ? 'Folder' : 'File';
      const owner = item.owners[0].emailAddress;
      const sharingAccess = item.permissions.length > 1 ? 'Shared' : 'Not Shared';
      const permissions = item.permissions.map(p => `${p.role}:${p.type}`).join(', ');
      const editors = item.permissions.filter(p => p.role === 'writer').map(p => p.emailAddress).join(', ');
      const viewers = item.permissions.filter(p => p.role === 'reader').map(p => p.emailAddress).join(', ');
      
      let permissionsRemoved = 'N/A';
      if (removePermissions && shouldIncludeItem(mode, emails, editors.split(', '), viewers.split(', '), owner)) {
        permissionsRemoved = removeItemPermissions(item.id, emails);
      }
      
      return [
        item.name,
        itemType,
        item.fullPath,
        owner,
        sharingAccess,
        permissions,
        editors,
        viewers,
        item.webViewLink,
        permissionsRemoved
      ];
    });
    
    sheet.getRange(sheet.getLastRow() + 1, 1, rows.length, rows[0].length).setValues(rows);
    manageProgress('set', Math.round((i + batch.length) / items.length * 100));
  }
}

function shouldIncludeItem(mode, emails, editors, viewers, owner) {
  switch (mode) {
    case 'all':
      return true;
    case 'editors':
      return emails.some(email => editors.includes(email));
    case 'viewers':
      return emails.some(email => viewers.includes(email));
    case 'owners':
      return emails.includes(owner);
    default:
      return false;
  }
}

function removeItemPermissions(fileId, emailsToRemove) {
  let removedCount = 0;
  
  emailsToRemove.forEach(email => {
    try {
      Drive.Permissions.delete(fileId, email);
      removedCount++;
    } catch (error) {
      // Permission not found or unable to remove, continue to next email
    }
  });
  
  return removedCount > 0 ? `Removed ${removedCount} permission(s)` : 'No permissions removed';
}
