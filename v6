// File: Code.gs

function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('File Audit')
    .addItem('Run File Audit', 'showAuditDialog')
    .addToUi();
}

function showAuditDialog() {
  const html = HtmlService.createHtmlOutput(`
    <!DOCTYPE html>
    <html>
      <head>
        <base target="_top">
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
        <link href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css" rel="stylesheet">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
        <style>
          .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            display: none;
            margin: 10px auto;
          }
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        </style>
        <script>
          function startAudit() {
            const form = document.getElementById('auditForm');
            const formData = new FormData(form);
            document.getElementById('spinner').style.display = 'block';
            document.getElementById('startAuditBtn').disabled = true;
            document.getElementById('closeBtn').disabled = true;
            document.getElementById('progressBar').style.display = 'block';
            document.getElementById('message').innerHTML = '';
            google.script.run
              .withSuccessHandler(function(result) {
                document.getElementById('message').innerHTML = result.message;
                document.getElementById('message').style.color = 'green';
                checkProgress();
              })
              .withFailureHandler(function(error) {
                document.getElementById('spinner').style.display = 'none';
                document.getElementById('startAuditBtn').disabled = false;
                document.getElementById('closeBtn').disabled = false;
                document.getElementById('message').innerHTML = 'Error: ' + error.message;
                document.getElementById('message').style.color = 'red';
              })
              .startAudit(Object.fromEntries(formData));
          }

          function checkProgress() {
            google.script.run
              .withSuccessHandler(updateProgressBar)
              .getAuditProgress();
          }

          function updateProgressBar(progress) {
            const fill = document.getElementById('progressBarFill');
            fill.style.width = progress + '%';
            fill.innerHTML = progress + '%';
            if (progress < 100) {
              setTimeout(checkProgress, 5000); // Check every 5 seconds
            } else {
              document.getElementById('spinner').style.display = 'none';
              document.getElementById('startAuditBtn').disabled = false;
              document.getElementById('closeBtn').disabled = false;
              document.getElementById('message').innerHTML = 'Audit complete! Check the "File Audit Results" sheet.';
            }
          }

          function closeDialog() {
            google.script.host.close();
          }
        </script>
      </head>
      <body>
        <div class="container">
          <form id="auditForm" class="col s12">
            <div class="input-field">
              <input type="text" id="folderId" name="folderId" placeholder="1SQKoQSnqmrdzjGXFISDjCJg2Sbg2GYga" required>
              <label for="folderId">Root Folder ID</label>
            </div>
            <p>Item Type:</p>
            <p>
              <label>
                <input name="itemType" type="radio" value="all" checked/>
                <span>Both Files and Folders</span>
              </label>
            </p>
            <p>
              <label>
                <input name="itemType" type="radio" value="files"/>
                <span>Files Only</span>
              </label>
            </p>
            <p>
              <label>
                <input name="itemType" type="radio" value="folders"/>
                <span>Folders Only</span>
              </label>
            </p>
            <p>Filter By:</p>
            <p>
              <label>
                <input type="checkbox" name="filterOwners" value="true"/>
                <span>Owners</span>
              </label>
            </p>
            <p>
              <label>
                <input type="checkbox" name="filterEditors" value="true"/>
                <span>Editors</span>
              </label>
            </p>
            <p>
              <label>
                <input type="checkbox" name="filterCommenters" value="true"/>
                <span>Commenters</span>
              </label>
            </p>
            <p>
              <label>
                <input type="checkbox" name="filterViewers" value="true"/>
                <span>Viewers</span>
              </label>
            </p>
            <div class="input-field">
              <textarea name="emails" class="materialize-textarea" rows="3" cols="40"></textarea>
              <label>Email addresses (comma-separated, for filtering)</label>
            </div>
            <p>
              <label>
                <input type="checkbox" name="removePermissions" value="true"/>
                <span>Remove permissions for listed emails</span>
              </label>
            </p>
            <div class="center-align">
              <a id="startAuditBtn" class="waves-effect waves-light btn" onclick="startAudit()">Start Audit</a>
              <a id="closeBtn" class="waves-effect waves-light btn" onclick="closeDialog()">Close</a>
            </div>
          </form>
          <div id="spinner" class="spinner"></div>
          <div id="progressBar" class="progress" style="display:none;">
            <div id="progressBarFill" class="determinate" style="width: 0%;">0%</div>
          </div>
          <div id="message" style="margin-top: 10px; text-align: center;"></div>
        </div>
      </body>
    </html>
  `).setWidth(400).setHeight(700);
  
  SpreadsheetApp.getUi().showModalDialog(html, 'File Audit Options');
}

function startAudit(options) {
  const props = PropertiesService.getScriptProperties();
  props.setProperty('auditOptions', JSON.stringify(options));
  props.setProperty('auditProgress', '0');
  props.deleteProperty('pageToken');
  
  // Start the audit process
  continueAudit();
  
  return { message: "Audit started. Check the 'File Audit Results' sheet for progress." };
}

function continueAudit() {
  const props = PropertiesService.getScriptProperties();
  const options = JSON.parse(props.getProperty('auditOptions'));
  const pageToken = props.getProperty('pageToken');
  
  const result = processNextBatch(options, pageToken);
  
  if (result.nextPageToken) {
    props.setProperty('pageToken', result.nextPageToken);
    // Schedule next batch
    ScriptApp.newTrigger('continueAudit')
      .timeBased()
      .everyMinutes(1)
      .create();
  } else {
    // Audit complete
    props.deleteProperty('auditOptions');
    props.deleteProperty('pageToken');
    props.setProperty('auditProgress', '100');
  }
}

function processNextBatch(options, pageToken) {
  const { folderId, itemType, filterOwners, filterEditors, filterCommenters, filterViewers, emails, removePermissions } = options;
  
  const query = `'${folderId}' in parents and trashed = false`;
  const fields = 'nextPageToken, files(id, name, mimeType, owners, permissions, webViewLink, parents)';
  
  const response = Drive.Files.list({
    q: query,
    fields: fields,
    pageToken: pageToken,
    pageSize: 1000  // Adjust as needed
  });
  
  const items = response.files.filter(file => {
    const isFolder = file.mimeType === 'application/vnd.google-apps.folder';
    return (itemType === 'all') || 
           (itemType === 'files' && !isFolder) || 
           (itemType === 'folders' && isFolder);
  });
  
  const filterOptions = { owners: filterOwners, editors: filterEditors, commenters: filterCommenters, viewers: filterViewers };
  const filteredItems = items.filter(item => shouldIncludeItem(filterOptions, emails, item));
  
  if (filteredItems.length > 0) {
    const sheet = getOrCreateAuditSheet();
    appendItemsToSheet(sheet, filteredItems);
    
    if (removePermissions === 'true') {
      removePermissionsBatch(filteredItems, emails);
    }
  }
  
  updateProgress(response.nextPageToken);
  
  return { nextPageToken: response.nextPageToken };
}

function shouldIncludeItem(filterOptions, emails, item) {
  if (emails.length === 0) return true;

  const permissions = item.permissions || [];
  const owner = item.owners && item.owners.length > 0 ? item.owners[0].emailAddress : '';
  
  return (filterOptions.owners && emails.includes(owner)) ||
         (filterOptions.editors && permissions.some(p => p.role === 'writer' && emails.includes(p.emailAddress))) ||
         (filterOptions.commenters && permissions.some(p => p.role === 'commenter' && emails.includes(p.emailAddress))) ||
         (filterOptions.viewers && permissions.some(p => p.role === 'reader' && emails.includes(p.emailAddress)));
}

function removePermissionsBatch(items, emailsToRemove) {
  const batch = Drive.newBatch();
  
  items.forEach(item => {
    emailsToRemove.forEach(email => {
      const permission = item.permissions.find(p => p.emailAddress === email);
      if (permission) {
        batch.add(Drive.Permissions.remove({
          fileId: item.id,
          permissionId: permission.id
        }));
      }
    });
  });
  
  batch.execute();
}

function getOrCreateAuditSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName('File Audit Results');
  if (!sheet) {
    sheet = ss.insertSheet('File Audit Results');
    sheet.appendRow(['File/Folder Name', 'Type', 'Owner', 'Sharing Access', 'Editors', 'Commenters', 'Viewers', 'URL']);
  }
  return sheet;
}

function appendItemsToSheet(sheet, items) {
  const rows = items.map(item => [
    item.name,
    item.mimeType === 'application/vnd.google-apps.folder' ? 'Folder' : 'File',
    item.owners[0].emailAddress,
    item.permissions.length > 1 ? 'Shared' : 'Not Shared',
    item.permissions.filter(p => p.role === 'writer').map(p => p.emailAddress).join(', '),
    item.permissions.filter(p => p.role === 'commenter').map(p => p.emailAddress).join(', '),
    item.permissions.filter(p => p.role === 'reader').map(p => p.emailAddress).join(', '),
    item.webViewLink
  ]);
  
  sheet.getRange(sheet.getLastRow() + 1, 1, rows.length, rows[0].length).setValues(rows);
}

function updateProgress(nextPageToken) {
  const props = PropertiesService.getScriptProperties();
  const currentProgress = Number(props.getProperty('auditProgress') || 0);
  const newProgress = nextPageToken ? Math.min(currentProgress + 10, 90) : 100;  // Increment by 10% each batch, max 90% until complete
  props.setProperty('auditProgress', newProgress.toString());
}

function getAuditProgress() {
  const props = PropertiesService.getScriptProperties();
  return Number(props.getProperty('auditProgress') || 0);
}
